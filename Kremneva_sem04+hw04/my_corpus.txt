id|text
1|""" По информации профильных экспертов и данных из статистики Google, трафик видеосервиса YouTube в РФ 23 декабря 2024 года упал до 20% от нормального средних значений, которые фиксировались на платформе до августа этого года. С 19 декабря 2024 года пользователи из РФ начали массово жаловаться на проблемы в работе YouTube. Сайт или мобильное приложение сервиса загружаются, но видеоролики не запускаются. Загрузка любого контента на платформе стала либо недоступна, либо происходит очень медленно. Проблема касается абонентов мобильных операторов и проводного доступа, включая МТС, «МегаФон», Т2 и «Билайн», а также других провайдеров связи РФ.
Представитель Google сообщил СМИ, что им известны сообщения о том, что некоторые пользователи не могут получить доступ к YouTube в России. «Это не является результатом каких‑либо технических проблем или действий с нашей стороны», — уточнили в американском видеосервисе.
В середине ноября «Ростелеком» сообщил СМИ, что компания технически не ограничивала работу YouTube в России. По мнению «Ростелекома», деградация американского видеосервиса связана с проблемами на серверах GGC (Google Global Cache) у операторов связи в РФ, так как Google три года не обновляет и не расширяет свою IT‑инфраструктуру в нашей стране.
Ранее в Роскомнадзоре сообщили, что основанием для принятия мер в отношении YouTube стали нарушения законодательства и «неуважение к нашей стране». Роскомнадзор видит основания для принятия мер в отношении YouTube. При этом право на использование инструментов для мотивации компании в такой ситуации остаётся за российской стороной, заявили СМИ в пресс‑службе Роскомнадзора. Регулятор напомнил, что Google более двух лет не работает в России и не поддерживает инфраструктуру своих кэширующих серверов на российских сетях связи. Как утверждают в ведомстве, такой подход привел к снижению качества работы YouTube. """
2|""" Прежде чем мы поговорим про сами APT-группировки, кратко вспомним об одном из инструментов борьбы с ними — EDR-системе. Продукты этого класса используют для защиты корпоративной инфраструктуры. Собственно, аббревиатура и расшифровывается как Endpoint Detection and Response, что можно перевести как «обнаружение и реагирование на конечных устройствах». Насколько хорошо EDR-решение будет справляться с угрозами, в основном зависит от двух составляющих:
точности детектирования, в нашем случае основанном на богатых правилах корреляции и нескольких других методах;
функциональных возможностей агентов, таких как быстрое реагирование, обогащение событий данными, сбор данных для форензики и проактивного поиска угроз.
Правила корреляции — это механизм автоматического обнаружения подозрительных действий в системе. Большинство из них основано на той или иной технике из матрицы MITRE ATT&CK — открытой базе знаний, в которой собрана информация о методах атак.
После того как действия, похожие на атаку, обнаружены, в дело вступают модули агента. По сути, это специальные приложения, которые выполняют самые разные функции: блокируют IP-адреса злоумышленников, помещают файлы в карантин, удаляют вредоносные объекты и т. п.
Отлично, с теорией мы разобрались, пора переходить к практике! Далее мы разберем деятельность четырех известных APT-группировок, а также рассмотрим, как MaxPatrol EDR и MITRE ATT&CK помогают защититься от их атак. """
3|""" Культурный код — это система знаков, традиций, норм и понятий, которые отличают одну группу людей от другой. Культурный код может рассказывать о чём угодно: о поколениях, увлечениях, профессиях, религии — о любых группах людей, связанных значительным общим контекстом. Но чаще всего о нём вспоминают, когда речь идёт о культурных различиях между национальностями и странами.
В декабре 2023 года мы взялись за большую задачу — оцифровать представление о современном российском культурном коде. Вместе с командой AI‑тренеров мы провели тщательное исследование и решили разложить эту задачу на следующие верхнеуровневые категории, которые, в свою очередь, состоят из более мелких. 
Сразу отмечу, что, хоть сфера истории тоже так или иначе относится к культурному коду, мы не включали её в этот бенчмарк. Для этого у нас есть отдельные бенчмарки, которые проверяют знания событий, личностей, фактов. Как только мы собрали тестовый кусочек бенчмарка на 200 вопросов, сразу протестировали на нашей команде. Этот замер подсветил смещение нашего мини‑бенча по возрастному критерию. Первая версия была сильно смещена скорее в 30+, так что мы задумались о необходимости выравнивания ситуации и ввели в классификацию вопросов категорию возраста. Например, люди младше 30 лет чаще не узнают отсылки к советскому кинематографу, а старше 30 — могут не узнать мемы и подростковый сленг.
Сначала мы разделили вопросы на две категории: те, которые скорее будут понятны людям 30+, и те, которые скорее будут понятны людям 30–. Но довольно быстро поняли, что существует множество областей и тем, в которых одинаково хорошо ориентируются обе группы. Так появилась категория «все». """
4|""" Основной единицей запуска вычислений на кластере является операция. Обычно операция берёт входные данные из таблиц на кластере, обрабатывает их и сохраняет результаты в виде выходных таблиц на том же кластере. Вычисления в YTsaurus можно запускать на разных языках: Python, Java, C++, Go.
Операции делятся на джобы — атомарные части вычислений, которые запускаются в контейнере на ноде кластера и обрабатывают фрагменты входных данных.
У самого планировщика как центрального компонента есть три функции:
Приём запросов на выполнение операций от пользователя.
Общение с нодами кластера — они приходят к планировщику с хартбитами и сообщают о свободных ресурсах, а планировщик в ответ сообщает о новых джобах, которые необходимо запустить.
Распределение ресурсов между операциями. Здесь и далее мы будем рассматривать работу планировщика, основываясь на примерах из Python Notebook (примеры в нём пронумерованы, и я буду ссылаться на эти номера). В кластере, на котором мы будем запускать данные примеры, доступно 24 CPU и 60 ГБ памяти.
Разберём простейшую операцию из примера № 1. Система принимает данные, «спит» минуту и пишет их на выход. После запуска каждая из них требует по 6 CPU. В сумме это 36 CPU, но, как уже было сказано в начале, в кластере доступно только 24.
Когда планировщик занимается распределением ресурсов, он «думает» не в абсолютных значениях ресурсов (то есть не в CPU), а в долях кластера. Таким образом, каждая операция требует 0,25 от кластера, а суммарно они требуют 1,5.
В столбце Usage можно увидеть фактическое потребление — в нашем случае оно равно 0,16. То же значение и в соседнем столбце Fair Share (FS). """
5|""" Привет! Меня зовут Михаил Мазанов, я отвечаю за технологический стек работы с медиаданными в Кинопоиске: от съёмок оригинальных проектов до доставки и просмотра видео на всех экранах. Для нашей пятой ежегодной конференции про стриминг PlayButton 2024 я готовил большой доклад про оптимизацию качества видео Кинопоиска, а для Хабра решил пересобрать его в виде статьи — для тех, кому текстовый формат предпочтительнее видео.
Кроме технических графиков, вас ждёт ещё и наглядная разница в работе алгоритмов сжатия на примере «Рика и Морти» и «Джона Уика».
Чтобы оптимизировать любой процесс, необходимо задать чёткие критерии. Для нас «качество» — это совокупность свойств, состав и значение которых формируется при создании продукта или услуги с целью удовлетворения актуальных потребностей.
Кажется немного сложным, но сейчас всё расскажу по порядку.
Существующие потребности важно учитывать, потому что они меняются с течением времени. То, что считалось стандартом качества 10 лет назад, уже не соответствует нормам 2024 года. Запросы потребителей и технические возможности постоянно растут, с ними меняется и самое понятие «хорошего качества» — это динамическая величина. """
6|""" Все, что мы выражаем письменно или устно, несет в себе огромное количество информации. Тема, которую мы выбираем, наш тон, подбор слов - все это добавляет некую информацию, которую можно интерпретировать, извлекая из нее определенный смысл. Теоретически мы можем понять и даже предсказать поведение человека, используя эту информацию.
Но есть одна проблема: один человек способен сгенерировать декларацию объемом в сотни или даже тысячи слов, состоящую из предложений самой разной сложности. Если вас интересуют большие масштабы и вам нужно анализировать несколько сотен, тысяч или даже миллионов людей или деклараций по какому-то конкретному региону, то в какой-то момент эта задача может стать совершенно неподъемной.
Данные, полученные из разговоров, деклараций или даже твитов, являются типичным примером неструктурированных данных. Неструктурированные данные не вписываются в традиционную структуру строк и столбцов реляционных баз данных и представляют собой подавляющее большинство данных, доступных в реальном мире. Они беспорядочны и трудны в обработке. Тем не менее, благодаря достижениям в таких дисциплинах, как машинное обучение, сегодня в этом направлении происходит революция. В настоящее время речь идет уже не о попытках интерпретировать текст или речь на основе ключевых слов (старомодный механический способ), а о понимании смысла этих слов (когнитивный способ). Современные наработки дают нам возможность определять фигуры речи, такие как, например, ирония, или даже проводить анализ тональности текста.
Обработка естественного языка или NLP (Natural Language Processing) — это область искусственного интеллекта, которая фокусируется на возможности машин читать, понимать и извлекать смысл из человеческих языков.
Это дисциплина, которая нацелена на разработку и применение современных подходов из data science к человеческому языку и находит свое практическое применение во все большем количестве различных отраслей. И действительно, сегодня NLP переживает настоящий бум. Мы должны быть благодарны за это значительным улучшениям в доступе к данным и увеличению вычислительной мощности, которые позволяют специалистам в этой области достигать вполне осязаемых результатов в таких областях, как здравоохранение, СМИ, финансы и управление кадрами, не говоря о великом множестве других применений. """
7|""" В мире продуктовой разработки важны гибкость и скорость обратной связи. Командам в ходе разработки приходится управлять множеством рисков и неопределенностью, связанных с бизнес- и технической неопределенностью.
Несмотря на попытку создавать лучшие планы, всегда в процессе возникают новые вводные, о которых мы не знали заранее. И если вовремя не адаптироваться, есть высокий риск прийти не туда. Именно для этого и создавался фреймворк Scrum.
В этой статье мы разберем наиболее важные элементы, которые позволяют балансировать предсказуемость и гибкость во благо доставки наивысшей ценности клиентам.
Спринт — это фиксированный и стабильный временной промежуток для организации разработки и создания готового инкремента, который мы можем показать пользователям и заинтересованным лицам. Scrum ограничивает длину спринта одним месяцем, но чаще всего Scrum команды выбирают более короткую длину спринта. Здесь стоит ориентироваться на уровень неопределенности и изменений: чем выше неопределенность — тем меньше длина спринта.
Какую ценность несут спринты для бизнеса?
В первую очередь — это снижение риска потерь. Поскольку Scrum — это разработка в условиях неопределенности, то спринты помогают управлять этой неопределенностью путем планирования работы на короткий промежуток, в виде спринта и далее получая обратную связь, принимать решение, куда двигаться дальше.
Это не значит, что в Scrum отсутствуют долгосрочные цели и планы. Это лишь дает нам возможность адаптироваться часто и быстро сокращая риски.
С другой стороны, спринты дают большую предсказуемость результатов для бизнеса. Каждый спринт команда берет на себя обязательство сделать инкремент (завершенный кусочек продукта).
Ниже мы рассмотрим ключевые принципы работы Scrum команды, для доставки готового и ценного инкремента каждый спринт. """
8|""" Привет, Хабр!
Представьте: вы запускаете A/B тест. Цель проста: проверить, работает ли новая кнопка лучше старой. Но тут же возникает мысль: «А вдруг мобильные юзеры и десктопные реагируют по‑разному? А что с новыми пользователями? Их мнение ведь явно не равноценное опытным юзерам». Без стратификации результат может быть так себе.
Что такое стратификация? Это способ сделать A/B тесты чуточку честнее. Берем выборку, делим ее на однородные группы — страты — по ключевым признакам (например, устройство и статус пользователя), а потом уже распределяем юзеров в группы А и Б.
Применять стратификацию стоит, если:
Много сегментов: например, мобильные и десктопные пользователи, которые ведут себя, как север и юг: вроде люди, но с совершенно разными привычками.
Важно сохранить баланс: вы же не хотите, чтобы в одной группе было 90% новичков, а в другой — одни ветераны интерфейсов.
Выборка достаточно большая: если страт больше, чем участников, тест превращается в цирк с мизерными данными.
Но не надо стратифицировать все подряд. Для мелких тестов или быстрых проверок «а что, если сделать кнопку розовой?» — проще оставить все как есть. """
9|""" Сейчас любое сколько‑нибудь серьезное приложение нуждается в базе данных для хранения информации. СУБД позволяет сохранять данные, оперативно находить и извлекать то, что нужно с помощью запросов. Но для того, чтобы наши данные в базе хранились в безопасности, необходимо не просто установить и настроить необходимое ПО, но выполнить харденинг — безопасную настройку СУБД.
В рамках данной статьи мы не будем концентрироваться на какой‑то конкретной СУБД, а рассмотрим те советы, которые подойдут любой базе данных.
Прежде всего, при размещении сервера важно помнить о физической безопасности. Сервер должен размещаться в серверной, куда ограничен доступ посторонним, в запирающемся серверном шкафу.
Как известно, уровень защищенности всей системы определяется по уровню защищенности ее самого слабого звена. И харденинг СУБД нужно начинать с безопасной настройки операционной системы сервера, на который мы собираемся устанавливать нашу базу данных.
Прежде всего, версия используемой ОС должна быть стабильной; не стоит экспериментировать с тестовыми релизами. При установке ОС нужно выбирать только те компоненты, которые действительно нужны для работы СУБД. Вряд ли для работы СУБД вам понадобится docker или microk8s на том же сервере, соответственно, не нужно их указывать при установке системы. После установки ОС не забудьте проверить обновления.
При построении архитектуры приложения помним правило: один сервер — одна роль. В нашем случае это означает, что на наш сервер с базой данных нельзя устанавливать что‑либо другое. Например, очень плохая идея ставить на один узел веб сервер и СУБД. В случае компрометации веб сервера злоумышленник сможет быстро захватить базу данных. Конечно, если мы говорим про среду разработки, там подобные компромиссы допустимы, но в продуктиве, даже если это веб ресурс для внутренней сети, такое делать не нужно.
Далее необходимо позаботиться о сетевой безопасности сервера. Не стоит полагаться на периметровые средства защиты, необходимо настроить межсетевое экранирование на самом хосте. Необходимо заранее определиться с тем, какие именно порты нам потребуются и оставить открытыми только их. Все остальные порты должны быть закрыты.
Для управления нашим сервером, скорее всего, потребуется SSH, если мы говорим про Linux. При настройке доступа по SSH необходимо использовать сертификаты, при этом ключ также неплохо было бы защитить паролем для того, чтобы постараться осложнить жизнь злоумышленнику. """
10|""" Привет, Хабр! Сегодня у нас на повестке дня тема кастомизации сетевого стека в Kubernetes с Cilium.
Cilium — это сетевое решение, которое работает прямо в ядре Linux и построено на основе eBPF. Его главная задача — обеспечить эффективное, а главное, безопасное взаимодействие между подами в кластере Kubernetes. И это не просто замена стандартному kube-proxy. Это полноценный инструмент для построения сетевых политик, мониторинга и кастомизации сетевого стека.
Основные фичи:
Гибкие сетевые политики: можно задать фильтры трафика на уровнях L3 (IP), L4 (TCP/UDP) и L7 (HTTP, gRPC).
Интеграция с Envoy: вместо того, чтобы ограничиваться стандартными функциями, вы можете подключить Envoy для управления сетевыми запросами или даже написать собственные программы на eBPF для уникальных задач.
Устранение узких мест: Cilium устраняет проблемы масштабирования iptables, переходя к использованию eBPF, который выполняет фильтрацию и маршрутизацию пакетов непосредственно в ядре Linux. Вместо линейного перебора правил, как в iptables, eBPF использует хэш-таблицы и карты, которые дают мгновенный доступ к нужным данным. Так трафик обратывается быстрее, с меньшей нагрузкой на процессор и без создания узких мест.
Перед тем как начать, убедитесь, что у вас есть:
Kubernetes-кластер.
Доступ к CLI kubectl.
Рабочий helm. """